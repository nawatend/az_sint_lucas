{"ast":null,"code":"import _objectSpread from \"/Users/quintenleysen/Documents/SINT_LUCAS/az_sint_lucas/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/quintenleysen/Documents/SINT_LUCAS/az_sint_lucas/client/src/components/games/virus-game/views/Game.jsx\";\nimport React, { Component } from 'react';\nimport * as PIXI from 'pixi.js';\nimport { gameConfig } from '../config';\nimport { Player, Virus } from '../components';\nimport { Spawner } from '../helpers';\nimport GameContext from '../context';\nconst virusSpawner = new Spawner();\nexport default class Game extends Component {\n  constructor(props) {\n    super(props);\n    this.setGameState = props.setGameState;\n  }\n\n  componentDidMount() {\n    this.gameState = this.context; //* Declaration of functions to be used in game context\n\n    /**\n    * Updates both local gameState and context\n    * * Is a workaround for local state not updating with context\n    * @param {Object} newState new state values for the object\n    */\n\n    const updateGameState = newState => {\n      this.gameState = newState;\n      this.setGameState(newState);\n    };\n    /**\n     * Spawns a new virus and adds it to the array of viruses\n     */\n\n\n    const spawnVirus = () => {\n      if (this.viruses.length < this.gameState.maxViruses) {\n        this.viruses.push(new Virus(this.app.renderer, this.app.stage));\n      }\n    };\n    /**\n     * Check if the game level has to be increased according to configured variables\n     */\n\n\n    const checkForLevelIncrease = () => {\n      const _this$gameState = this.gameState,\n            score = _this$gameState.score,\n            maxViruses = _this$gameState.maxViruses,\n            level = _this$gameState.level;\n\n      if (score % this.difficulty.scorePerLevel === 0) {\n        updateGameState(_objectSpread({}, this.gameState, {\n          score: score + 1,\n          maxViruses: maxViruses + this.difficulty.virusPerLevel,\n          level: level + 1\n        }));\n      }\n    };\n    /**\n     * Removes all viruses from the game canvas.\n     */\n\n\n    const removeVirusesFromScreen = () => {\n      const objectsToRemove = this.app.stage.children.filter(child => child.cursor !== 'pointer');\n      objectsToRemove.forEach(object => {\n        this.app.stage.removeChild(object);\n      });\n      this.viruses = [];\n    };\n    /**\n     * Resets the game window. Used to reset viruses after player hit.\n     */\n\n\n    const resetGameWindow = () => {\n      updateGameState(_objectSpread({}, this.gameState, {\n        playing: false\n      }));\n      this.player.setDraggable(false);\n      removeVirusesFromScreen();\n\n      if (this.gameState.lives === 0) {\n        this.player.reset();\n      }\n    };\n    /**\n     * Resumes the game window\n     */\n\n\n    const resumeGameWindow = () => {\n      updateGameState(_objectSpread({}, this.gameState, {\n        playing: true\n      }));\n      this.player.setDraggable(true);\n    };\n    /**\n     * Logic that has to be handled during every game loop.\n     */\n\n\n    const gameLoop = () => {\n      const _this$app = this.app,\n            renderer = _this$app.renderer,\n            _this$app$view = _this$app.view,\n            gameWidth = _this$app$view.width,\n            gameHeight = _this$app$view.height;\n      this.player.containCharacter(renderer);\n\n      if (this.gameState.playing) {\n        this.viruses.forEach((virus, i) => {\n          virus.animateVirus(); // Check for player collision BEFORE removal\n\n          if (virus.checkPlayerCollision(this.player)) {\n            resetGameWindow();\n\n            if (this.gameState.lives > 0) {\n              updateGameState(_objectSpread({}, this.gameState, {\n                lives: this.gameState.lives - 1\n              }));\n              resumeGameWindow();\n            } else {\n              updateGameState(_objectSpread({}, this.gameState, {\n                playing: false,\n                gameOver: true\n              }));\n              this.app.stop();\n            }\n          }\n\n          if (virus.checkCollision({\n            gameWidth,\n            gameHeight\n          })) {\n            this.viruses.splice(i, 1);\n            updateGameState(_objectSpread({}, this.gameState, {\n              score: this.gameState.score + 1\n            }));\n            checkForLevelIncrease();\n            virus.sprite.destroy();\n          }\n        });\n      }\n    };\n    /**\n     * Initialize a new game\n     */\n\n\n    const initGame = difficulty => {\n      // Reset the full game window before creating a new game\n      this.difficulty = this.gameState.difficulty[difficulty];\n      resetGameWindow();\n      updateGameState(gameConfig.game);\n      this.viruses = []; // Start a new game\n\n      this.player.setDraggable(true);\n      updateGameState(_objectSpread({}, this.gameState, {\n        hasStarted: true,\n        playing: true,\n        maxViruses: this.difficulty.initViruses\n      }));\n      virusSpawner.start(spawnVirus, this.difficulty.spawnInterval);\n      this.app.ticker.add(gameLoop);\n    }; // Global variables for the game\n\n\n    updateGameState(_objectSpread({}, this.gameState, {\n      startGame: difficulty => {\n        initGame(difficulty);\n      },\n      updateState: () => {\n        updateGameState();\n      }\n    }));\n    this.app = new PIXI.Application(gameConfig.window);\n    this.app.view.classList.add('virus__game--size');\n    this.gameCanvas.appendChild(this.app.view);\n    this.player = new Player(this.app.renderer, this.app.stage);\n  }\n\n  componentWillUnmount() {\n    this.app.stop();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      ref: thisDiv => {\n        this.gameCanvas = thisDiv;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    });\n  }\n\n} // Add context type to Game class\n\nGame.contextType = GameContext;","map":{"version":3,"sources":["/Users/quintenleysen/Documents/SINT_LUCAS/az_sint_lucas/client/src/components/games/virus-game/views/Game.jsx"],"names":["React","Component","PIXI","gameConfig","Player","Virus","Spawner","GameContext","virusSpawner","Game","constructor","props","setGameState","componentDidMount","gameState","context","updateGameState","newState","spawnVirus","viruses","length","maxViruses","push","app","renderer","stage","checkForLevelIncrease","score","level","difficulty","scorePerLevel","virusPerLevel","removeVirusesFromScreen","objectsToRemove","children","filter","child","cursor","forEach","object","removeChild","resetGameWindow","playing","player","setDraggable","lives","reset","resumeGameWindow","gameLoop","view","gameWidth","width","gameHeight","height","containCharacter","virus","i","animateVirus","checkPlayerCollision","gameOver","stop","checkCollision","splice","sprite","destroy","initGame","game","hasStarted","initViruses","start","spawnInterval","ticker","add","startGame","updateState","Application","window","classList","gameCanvas","appendChild","componentWillUnmount","render","thisDiv","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport * as PIXI from 'pixi.js';\nimport { gameConfig } from '../config';\nimport { Player, Virus } from '../components';\nimport { Spawner } from '../helpers';\nimport GameContext from '../context';\n\nconst virusSpawner = new Spawner();\n\nexport default class Game extends Component {\n  constructor(props) {\n    super(props);\n    this.setGameState = props.setGameState;\n  }\n\n  componentDidMount() {\n    this.gameState = this.context;\n\n    //* Declaration of functions to be used in game context\n    /**\n    * Updates both local gameState and context\n    * * Is a workaround for local state not updating with context\n    * @param {Object} newState new state values for the object\n    */\n    const updateGameState = (newState) => {\n      this.gameState = newState;\n      this.setGameState(newState);\n    };\n\n    /**\n     * Spawns a new virus and adds it to the array of viruses\n     */\n    const spawnVirus = () => {\n      if (this.viruses.length < this.gameState.maxViruses) {\n        this.viruses.push((new Virus(this.app.renderer, this.app.stage)));\n      }\n    };\n\n    /**\n     * Check if the game level has to be increased according to configured variables\n     */\n    const checkForLevelIncrease = () => {\n      const {\n        score, maxViruses, level,\n      } = this.gameState;\n      if (score % this.difficulty.scorePerLevel === 0) {\n        updateGameState({\n          ...this.gameState,\n          score: score + 1,\n          maxViruses: maxViruses + this.difficulty.virusPerLevel,\n          level: level + 1,\n        });\n      }\n    };\n\n    /**\n     * Removes all viruses from the game canvas.\n     */\n    const removeVirusesFromScreen = () => {\n      const objectsToRemove = this.app.stage.children.filter((child) => child.cursor !== 'pointer');\n      objectsToRemove.forEach((object) => {\n        this.app.stage.removeChild(object);\n      });\n      this.viruses = [];\n    };\n\n    /**\n     * Resets the game window. Used to reset viruses after player hit.\n     */\n    const resetGameWindow = () => {\n      updateGameState({\n        ...this.gameState,\n        playing: false,\n      });\n      this.player.setDraggable(false);\n      removeVirusesFromScreen();\n      if (this.gameState.lives === 0) {\n        this.player.reset();\n      }\n    };\n\n    /**\n     * Resumes the game window\n     */\n    const resumeGameWindow = () => {\n      updateGameState({\n        ...this.gameState,\n        playing: true,\n      });\n      this.player.setDraggable(true);\n    };\n\n    /**\n     * Logic that has to be handled during every game loop.\n     */\n    const gameLoop = () => {\n      const { renderer, view: { width: gameWidth, height: gameHeight } } = this.app;\n      this.player.containCharacter(renderer);\n      if (this.gameState.playing) {\n        this.viruses.forEach((virus, i) => {\n          virus.animateVirus();\n          // Check for player collision BEFORE removal\n          if (virus.checkPlayerCollision(this.player)) {\n            resetGameWindow();\n            if (this.gameState.lives > 0) {\n              updateGameState({\n                ...this.gameState,\n                lives: this.gameState.lives - 1,\n              });\n              resumeGameWindow();\n            } else {\n              updateGameState({\n                ...this.gameState,\n                playing: false,\n                gameOver: true,\n              });\n              this.app.stop();\n            }\n          }\n\n          if (virus.checkCollision({ gameWidth, gameHeight })) {\n            this.viruses.splice(i, 1);\n            updateGameState({\n              ...this.gameState,\n              score: this.gameState.score + 1,\n            });\n            checkForLevelIncrease();\n            virus.sprite.destroy();\n          }\n        });\n      }\n    };\n\n    /**\n     * Initialize a new game\n     */\n    const initGame = (difficulty) => {\n      // Reset the full game window before creating a new game\n      this.difficulty = this.gameState.difficulty[difficulty];\n      resetGameWindow();\n      updateGameState(gameConfig.game);\n      this.viruses = [];\n      // Start a new game\n      this.player.setDraggable(true);\n      updateGameState({\n        ...this.gameState,\n        hasStarted: true,\n        playing: true,\n        maxViruses: this.difficulty.initViruses,\n      });\n      virusSpawner.start(spawnVirus, this.difficulty.spawnInterval);\n      this.app.ticker.add(gameLoop);\n    };\n\n    // Global variables for the game\n    updateGameState({\n      ...this.gameState,\n      startGame: (difficulty) => { initGame(difficulty); },\n      updateState: () => { updateGameState(); },\n    });\n    this.app = new PIXI.Application(gameConfig.window);\n    this.app.view.classList.add('virus__game--size')\n    this.gameCanvas.appendChild(this.app.view);\n\n    this.player = new Player(this.app.renderer, this.app.stage);\n  }\n\n  componentWillUnmount() {\n    this.app.stop();\n  }\n\n  render() {\n    return (\n      <div ref={(thisDiv) => { this.gameCanvas = thisDiv; }} />\n    );\n  }\n}\n\n// Add context type to Game class\nGame.contextType = GameContext;\n"]},"metadata":{},"sourceType":"module"}