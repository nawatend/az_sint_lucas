{"ast":null,"code":"/**\n * mux.js\n *\n * Copyright (c) Brightcove\n * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n *\n * Utilities to detect basic properties and metadata about MP4s.\n */\n'use strict';\n\nvar toUnsigned = require('../utils/bin').toUnsigned;\n\nvar toHexString = require('../utils/bin').toHexString;\n\nvar findBox, parseType, timescale, startTime, getVideoTrackIds, getTracks; // Find the data for a box specified by its path\n\nfindBox = function (data, path) {\n  var results = [],\n      i,\n      size,\n      type,\n      end,\n      subresults;\n\n  if (!path.length) {\n    // short-circuit the search for empty paths\n    return null;\n  }\n\n  for (i = 0; i < data.byteLength;) {\n    size = toUnsigned(data[i] << 24 | data[i + 1] << 16 | data[i + 2] << 8 | data[i + 3]);\n    type = parseType(data.subarray(i + 4, i + 8));\n    end = size > 1 ? i + size : data.byteLength;\n\n    if (type === path[0]) {\n      if (path.length === 1) {\n        // this is the end of the path and we've found the box we were\n        // looking for\n        results.push(data.subarray(i + 8, end));\n      } else {\n        // recursively search for the next box along the path\n        subresults = findBox(data.subarray(i + 8, end), path.slice(1));\n\n        if (subresults.length) {\n          results = results.concat(subresults);\n        }\n      }\n    }\n\n    i = end;\n  } // we've finished searching all of data\n\n\n  return results;\n};\n/**\n * Returns the string representation of an ASCII encoded four byte buffer.\n * @param buffer {Uint8Array} a four-byte buffer to translate\n * @return {string} the corresponding string\n */\n\n\nparseType = function (buffer) {\n  var result = '';\n  result += String.fromCharCode(buffer[0]);\n  result += String.fromCharCode(buffer[1]);\n  result += String.fromCharCode(buffer[2]);\n  result += String.fromCharCode(buffer[3]);\n  return result;\n};\n/**\n * Parses an MP4 initialization segment and extracts the timescale\n * values for any declared tracks. Timescale values indicate the\n * number of clock ticks per second to assume for time-based values\n * elsewhere in the MP4.\n *\n * To determine the start time of an MP4, you need two pieces of\n * information: the timescale unit and the earliest base media decode\n * time. Multiple timescales can be specified within an MP4 but the\n * base media decode time is always expressed in the timescale from\n * the media header box for the track:\n * ```\n * moov > trak > mdia > mdhd.timescale\n * ```\n * @param init {Uint8Array} the bytes of the init segment\n * @return {object} a hash of track ids to timescale values or null if\n * the init segment is malformed.\n */\n\n\ntimescale = function (init) {\n  var result = {},\n      traks = findBox(init, ['moov', 'trak']); // mdhd timescale\n\n  return traks.reduce(function (result, trak) {\n    var tkhd, version, index, id, mdhd;\n    tkhd = findBox(trak, ['tkhd'])[0];\n\n    if (!tkhd) {\n      return null;\n    }\n\n    version = tkhd[0];\n    index = version === 0 ? 12 : 20;\n    id = toUnsigned(tkhd[index] << 24 | tkhd[index + 1] << 16 | tkhd[index + 2] << 8 | tkhd[index + 3]);\n    mdhd = findBox(trak, ['mdia', 'mdhd'])[0];\n\n    if (!mdhd) {\n      return null;\n    }\n\n    version = mdhd[0];\n    index = version === 0 ? 12 : 20;\n    result[id] = toUnsigned(mdhd[index] << 24 | mdhd[index + 1] << 16 | mdhd[index + 2] << 8 | mdhd[index + 3]);\n    return result;\n  }, result);\n};\n/**\n * Determine the base media decode start time, in seconds, for an MP4\n * fragment. If multiple fragments are specified, the earliest time is\n * returned.\n *\n * The base media decode time can be parsed from track fragment\n * metadata:\n * ```\n * moof > traf > tfdt.baseMediaDecodeTime\n * ```\n * It requires the timescale value from the mdhd to interpret.\n *\n * @param timescale {object} a hash of track ids to timescale values.\n * @return {number} the earliest base media decode start time for the\n * fragment, in seconds\n */\n\n\nstartTime = function (timescale, fragment) {\n  var trafs, baseTimes, result; // we need info from two childrend of each track fragment box\n\n  trafs = findBox(fragment, ['moof', 'traf']); // determine the start times for each track\n\n  baseTimes = [].concat.apply([], trafs.map(function (traf) {\n    return findBox(traf, ['tfhd']).map(function (tfhd) {\n      var id, scale, baseTime; // get the track id from the tfhd\n\n      id = toUnsigned(tfhd[4] << 24 | tfhd[5] << 16 | tfhd[6] << 8 | tfhd[7]); // assume a 90kHz clock if no timescale was specified\n\n      scale = timescale[id] || 90e3; // get the base media decode time from the tfdt\n\n      baseTime = findBox(traf, ['tfdt']).map(function (tfdt) {\n        var version, result;\n        version = tfdt[0];\n        result = toUnsigned(tfdt[4] << 24 | tfdt[5] << 16 | tfdt[6] << 8 | tfdt[7]);\n\n        if (version === 1) {\n          result *= Math.pow(2, 32);\n          result += toUnsigned(tfdt[8] << 24 | tfdt[9] << 16 | tfdt[10] << 8 | tfdt[11]);\n        }\n\n        return result;\n      })[0];\n      baseTime = baseTime || Infinity; // convert base time to seconds\n\n      return baseTime / scale;\n    });\n  })); // return the minimum\n\n  result = Math.min.apply(null, baseTimes);\n  return isFinite(result) ? result : 0;\n};\n/**\n  * Find the trackIds of the video tracks in this source.\n  * Found by parsing the Handler Reference and Track Header Boxes:\n  *   moov > trak > mdia > hdlr\n  *   moov > trak > tkhd\n  *\n  * @param {Uint8Array} init - The bytes of the init segment for this source\n  * @return {Number[]} A list of trackIds\n  *\n  * @see ISO-BMFF-12/2015, Section 8.4.3\n **/\n\n\ngetVideoTrackIds = function (init) {\n  var traks = findBox(init, ['moov', 'trak']);\n  var videoTrackIds = [];\n  traks.forEach(function (trak) {\n    var hdlrs = findBox(trak, ['mdia', 'hdlr']);\n    var tkhds = findBox(trak, ['tkhd']);\n    hdlrs.forEach(function (hdlr, index) {\n      var handlerType = parseType(hdlr.subarray(8, 12));\n      var tkhd = tkhds[index];\n      var view;\n      var version;\n      var trackId;\n\n      if (handlerType === 'vide') {\n        view = new DataView(tkhd.buffer, tkhd.byteOffset, tkhd.byteLength);\n        version = view.getUint8(0);\n        trackId = version === 0 ? view.getUint32(12) : view.getUint32(20);\n        videoTrackIds.push(trackId);\n      }\n    });\n  });\n  return videoTrackIds;\n};\n/**\n * Get all the video, audio, and hint tracks from a non fragmented\n * mp4 segment\n */\n\n\ngetTracks = function (init) {\n  var traks = findBox(init, ['moov', 'trak']);\n  var tracks = [];\n  traks.forEach(function (trak) {\n    var track = {};\n    var tkhd = findBox(trak, ['tkhd'])[0];\n    var view, version; // id\n\n    if (tkhd) {\n      view = new DataView(tkhd.buffer, tkhd.byteOffset, tkhd.byteLength);\n      version = view.getUint8(0);\n      track.id = version === 0 ? view.getUint32(12) : view.getUint32(20);\n    }\n\n    var hdlr = findBox(trak, ['mdia', 'hdlr'])[0]; // type\n\n    if (hdlr) {\n      var type = parseType(hdlr.subarray(8, 12));\n\n      if (type === 'vide') {\n        track.type = 'video';\n      } else if (type === 'soun') {\n        track.type = 'audio';\n      } else {\n        track.type = type;\n      }\n    } // codec\n\n\n    var stsd = findBox(trak, ['mdia', 'minf', 'stbl', 'stsd'])[0];\n\n    if (stsd) {\n      var sampleDescriptions = stsd.subarray(8); // gives the codec type string\n\n      track.codec = parseType(sampleDescriptions.subarray(4, 8));\n      var codecBox = findBox(sampleDescriptions, [track.codec])[0];\n      var codecConfig, codecConfigType;\n\n      if (codecBox) {\n        // https://tools.ietf.org/html/rfc6381#section-3.3\n        if (/^[a-z]vc[1-9]$/i.test(track.codec)) {\n          // we don't need anything but the \"config\" parameter of the\n          // avc1 codecBox\n          codecConfig = codecBox.subarray(78);\n          codecConfigType = parseType(codecConfig.subarray(4, 8));\n\n          if (codecConfigType === 'avcC' && codecConfig.length > 11) {\n            track.codec += '.'; // left padded with zeroes for single digit hex\n            // profile idc\n\n            track.codec += toHexString(codecConfig[9]); // the byte containing the constraint_set flags\n\n            track.codec += toHexString(codecConfig[10]); // level idc\n\n            track.codec += toHexString(codecConfig[11]);\n          } else {\n            // TODO: show a warning that we couldn't parse the codec\n            // and are using the default\n            track.codec = 'avc1.4d400d';\n          }\n        } else if (/^mp4[a,v]$/i.test(track.codec)) {\n          // we do not need anything but the streamDescriptor of the mp4a codecBox\n          codecConfig = codecBox.subarray(28);\n          codecConfigType = parseType(codecConfig.subarray(4, 8));\n\n          if (codecConfigType === 'esds' && codecConfig.length > 20 && codecConfig[19] !== 0) {\n            track.codec += '.' + toHexString(codecConfig[19]); // this value is only a single digit\n\n            track.codec += '.' + toHexString(codecConfig[20] >>> 2 & 0x3f).replace(/^0/, '');\n          } else {\n            // TODO: show a warning that we couldn't parse the codec\n            // and are using the default\n            track.codec = 'mp4a.40.2';\n          }\n        } else {// TODO: show a warning? for unknown codec type\n        }\n      }\n    }\n\n    var mdhd = findBox(trak, ['mdia', 'mdhd'])[0];\n\n    if (mdhd && tkhd) {\n      var index = version === 0 ? 12 : 20;\n      track.timescale = toUnsigned(mdhd[index] << 24 | mdhd[index + 1] << 16 | mdhd[index + 2] << 8 | mdhd[index + 3]);\n    }\n\n    tracks.push(track);\n  });\n  return tracks;\n};\n\nmodule.exports = {\n  findBox: findBox,\n  parseType: parseType,\n  timescale: timescale,\n  startTime: startTime,\n  videoTrackIds: getVideoTrackIds,\n  tracks: getTracks\n};","map":{"version":3,"sources":["/Users/quintenleysen/Documents/AZ_SINT_LUCAS/az_sint_lucas/client/node_modules/mux.js/lib/mp4/probe.js"],"names":["toUnsigned","require","toHexString","findBox","parseType","timescale","startTime","getVideoTrackIds","getTracks","data","path","results","i","size","type","end","subresults","length","byteLength","subarray","push","slice","concat","buffer","result","String","fromCharCode","init","traks","reduce","trak","tkhd","version","index","id","mdhd","fragment","trafs","baseTimes","apply","map","traf","tfhd","scale","baseTime","tfdt","Math","pow","Infinity","min","isFinite","videoTrackIds","forEach","hdlrs","tkhds","hdlr","handlerType","view","trackId","DataView","byteOffset","getUint8","getUint32","tracks","track","stsd","sampleDescriptions","codec","codecBox","codecConfig","codecConfigType","test","replace","module","exports"],"mappings":"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","sourcesContent":["/**\n * mux.js\n *\n * Copyright (c) Brightcove\n * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n *\n * Utilities to detect basic properties and metadata about MP4s.\n */\n'use strict';\n\nvar toUnsigned = require('../utils/bin').toUnsigned;\nvar toHexString = require('../utils/bin').toHexString;\nvar findBox, parseType, timescale, startTime, getVideoTrackIds, getTracks;\n\n// Find the data for a box specified by its path\nfindBox = function(data, path) {\n  var results = [],\n      i, size, type, end, subresults;\n\n  if (!path.length) {\n    // short-circuit the search for empty paths\n    return null;\n  }\n\n  for (i = 0; i < data.byteLength;) {\n    size  = toUnsigned(data[i]     << 24 |\n                       data[i + 1] << 16 |\n                       data[i + 2] <<  8 |\n                       data[i + 3]);\n\n    type = parseType(data.subarray(i + 4, i + 8));\n\n    end = size > 1 ? i + size : data.byteLength;\n\n    if (type === path[0]) {\n      if (path.length === 1) {\n        // this is the end of the path and we've found the box we were\n        // looking for\n        results.push(data.subarray(i + 8, end));\n      } else {\n        // recursively search for the next box along the path\n        subresults = findBox(data.subarray(i + 8, end), path.slice(1));\n        if (subresults.length) {\n          results = results.concat(subresults);\n        }\n      }\n    }\n    i = end;\n  }\n\n  // we've finished searching all of data\n  return results;\n};\n\n/**\n * Returns the string representation of an ASCII encoded four byte buffer.\n * @param buffer {Uint8Array} a four-byte buffer to translate\n * @return {string} the corresponding string\n */\nparseType = function(buffer) {\n  var result = '';\n  result += String.fromCharCode(buffer[0]);\n  result += String.fromCharCode(buffer[1]);\n  result += String.fromCharCode(buffer[2]);\n  result += String.fromCharCode(buffer[3]);\n  return result;\n};\n\n/**\n * Parses an MP4 initialization segment and extracts the timescale\n * values for any declared tracks. Timescale values indicate the\n * number of clock ticks per second to assume for time-based values\n * elsewhere in the MP4.\n *\n * To determine the start time of an MP4, you need two pieces of\n * information: the timescale unit and the earliest base media decode\n * time. Multiple timescales can be specified within an MP4 but the\n * base media decode time is always expressed in the timescale from\n * the media header box for the track:\n * ```\n * moov > trak > mdia > mdhd.timescale\n * ```\n * @param init {Uint8Array} the bytes of the init segment\n * @return {object} a hash of track ids to timescale values or null if\n * the init segment is malformed.\n */\ntimescale = function(init) {\n  var\n    result = {},\n    traks = findBox(init, ['moov', 'trak']);\n\n  // mdhd timescale\n  return traks.reduce(function(result, trak) {\n    var tkhd, version, index, id, mdhd;\n\n    tkhd = findBox(trak, ['tkhd'])[0];\n    if (!tkhd) {\n      return null;\n    }\n    version = tkhd[0];\n    index = version === 0 ? 12 : 20;\n    id = toUnsigned(tkhd[index]     << 24 |\n                    tkhd[index + 1] << 16 |\n                    tkhd[index + 2] <<  8 |\n                    tkhd[index + 3]);\n\n    mdhd = findBox(trak, ['mdia', 'mdhd'])[0];\n    if (!mdhd) {\n      return null;\n    }\n    version = mdhd[0];\n    index = version === 0 ? 12 : 20;\n    result[id] = toUnsigned(mdhd[index]     << 24 |\n                            mdhd[index + 1] << 16 |\n                            mdhd[index + 2] <<  8 |\n                            mdhd[index + 3]);\n    return result;\n  }, result);\n};\n\n/**\n * Determine the base media decode start time, in seconds, for an MP4\n * fragment. If multiple fragments are specified, the earliest time is\n * returned.\n *\n * The base media decode time can be parsed from track fragment\n * metadata:\n * ```\n * moof > traf > tfdt.baseMediaDecodeTime\n * ```\n * It requires the timescale value from the mdhd to interpret.\n *\n * @param timescale {object} a hash of track ids to timescale values.\n * @return {number} the earliest base media decode start time for the\n * fragment, in seconds\n */\nstartTime = function(timescale, fragment) {\n  var trafs, baseTimes, result;\n\n  // we need info from two childrend of each track fragment box\n  trafs = findBox(fragment, ['moof', 'traf']);\n\n  // determine the start times for each track\n  baseTimes = [].concat.apply([], trafs.map(function(traf) {\n    return findBox(traf, ['tfhd']).map(function(tfhd) {\n      var id, scale, baseTime;\n\n      // get the track id from the tfhd\n      id = toUnsigned(tfhd[4] << 24 |\n                      tfhd[5] << 16 |\n                      tfhd[6] <<  8 |\n                      tfhd[7]);\n      // assume a 90kHz clock if no timescale was specified\n      scale = timescale[id] || 90e3;\n\n      // get the base media decode time from the tfdt\n      baseTime = findBox(traf, ['tfdt']).map(function(tfdt) {\n        var version, result;\n\n        version = tfdt[0];\n        result = toUnsigned(tfdt[4] << 24 |\n                            tfdt[5] << 16 |\n                            tfdt[6] <<  8 |\n                            tfdt[7]);\n        if (version ===  1) {\n          result *= Math.pow(2, 32);\n          result += toUnsigned(tfdt[8]  << 24 |\n                               tfdt[9]  << 16 |\n                               tfdt[10] <<  8 |\n                               tfdt[11]);\n        }\n        return result;\n      })[0];\n      baseTime = baseTime || Infinity;\n\n      // convert base time to seconds\n      return baseTime / scale;\n    });\n  }));\n\n  // return the minimum\n  result = Math.min.apply(null, baseTimes);\n  return isFinite(result) ? result : 0;\n};\n\n/**\n  * Find the trackIds of the video tracks in this source.\n  * Found by parsing the Handler Reference and Track Header Boxes:\n  *   moov > trak > mdia > hdlr\n  *   moov > trak > tkhd\n  *\n  * @param {Uint8Array} init - The bytes of the init segment for this source\n  * @return {Number[]} A list of trackIds\n  *\n  * @see ISO-BMFF-12/2015, Section 8.4.3\n **/\ngetVideoTrackIds = function(init) {\n  var traks = findBox(init, ['moov', 'trak']);\n  var videoTrackIds = [];\n\n  traks.forEach(function(trak) {\n    var hdlrs = findBox(trak, ['mdia', 'hdlr']);\n    var tkhds = findBox(trak, ['tkhd']);\n\n    hdlrs.forEach(function(hdlr, index) {\n      var handlerType = parseType(hdlr.subarray(8, 12));\n      var tkhd = tkhds[index];\n      var view;\n      var version;\n      var trackId;\n\n      if (handlerType === 'vide') {\n        view = new DataView(tkhd.buffer, tkhd.byteOffset, tkhd.byteLength);\n        version = view.getUint8(0);\n        trackId = (version === 0) ? view.getUint32(12) : view.getUint32(20);\n\n        videoTrackIds.push(trackId);\n      }\n    });\n  });\n\n  return videoTrackIds;\n};\n\n/**\n * Get all the video, audio, and hint tracks from a non fragmented\n * mp4 segment\n */\ngetTracks = function(init) {\n  var traks = findBox(init, ['moov', 'trak']);\n  var tracks = [];\n\n  traks.forEach(function(trak) {\n    var track = {};\n    var tkhd = findBox(trak, ['tkhd'])[0];\n    var view, version;\n\n    // id\n    if (tkhd) {\n      view = new DataView(tkhd.buffer, tkhd.byteOffset, tkhd.byteLength);\n      version = view.getUint8(0);\n\n      track.id = (version === 0) ? view.getUint32(12) : view.getUint32(20);\n    }\n\n    var hdlr = findBox(trak, ['mdia', 'hdlr'])[0];\n\n    // type\n    if (hdlr) {\n      var type = parseType(hdlr.subarray(8, 12));\n\n      if (type === 'vide') {\n        track.type = 'video';\n      } else if (type === 'soun') {\n        track.type = 'audio';\n      } else {\n        track.type = type;\n      }\n    }\n\n\n    // codec\n    var stsd = findBox(trak, ['mdia', 'minf', 'stbl', 'stsd'])[0];\n\n    if (stsd) {\n      var sampleDescriptions = stsd.subarray(8);\n      // gives the codec type string\n      track.codec = parseType(sampleDescriptions.subarray(4, 8));\n\n      var codecBox = findBox(sampleDescriptions, [track.codec])[0];\n      var codecConfig, codecConfigType;\n\n      if (codecBox) {\n        // https://tools.ietf.org/html/rfc6381#section-3.3\n        if ((/^[a-z]vc[1-9]$/i).test(track.codec)) {\n          // we don't need anything but the \"config\" parameter of the\n          // avc1 codecBox\n          codecConfig = codecBox.subarray(78);\n          codecConfigType = parseType(codecConfig.subarray(4, 8));\n\n          if (codecConfigType === 'avcC' && codecConfig.length > 11) {\n            track.codec += '.';\n\n            // left padded with zeroes for single digit hex\n            // profile idc\n            track.codec +=  toHexString(codecConfig[9]);\n            // the byte containing the constraint_set flags\n            track.codec += toHexString(codecConfig[10]);\n            // level idc\n            track.codec += toHexString(codecConfig[11]);\n          } else {\n            // TODO: show a warning that we couldn't parse the codec\n            // and are using the default\n            track.codec = 'avc1.4d400d';\n          }\n        } else if ((/^mp4[a,v]$/i).test(track.codec)) {\n          // we do not need anything but the streamDescriptor of the mp4a codecBox\n          codecConfig = codecBox.subarray(28);\n          codecConfigType = parseType(codecConfig.subarray(4, 8));\n\n          if (codecConfigType === 'esds' && codecConfig.length > 20 && codecConfig[19] !== 0) {\n            track.codec += '.' + toHexString(codecConfig[19]);\n            // this value is only a single digit\n            track.codec += '.' + toHexString((codecConfig[20] >>> 2) & 0x3f).replace(/^0/, '');\n          } else {\n            // TODO: show a warning that we couldn't parse the codec\n            // and are using the default\n            track.codec = 'mp4a.40.2';\n          }\n        } else {\n          // TODO: show a warning? for unknown codec type\n        }\n      }\n    }\n\n    var mdhd = findBox(trak, ['mdia', 'mdhd'])[0];\n\n    if (mdhd && tkhd) {\n      var index = version === 0 ? 12 : 20;\n\n      track.timescale = toUnsigned(mdhd[index]     << 24 |\n                                   mdhd[index + 1] << 16 |\n                                   mdhd[index + 2] <<  8 |\n                                   mdhd[index + 3]);\n    }\n\n    tracks.push(track);\n  });\n\n  return tracks;\n};\n\nmodule.exports = {\n  findBox: findBox,\n  parseType: parseType,\n  timescale: timescale,\n  startTime: startTime,\n  videoTrackIds: getVideoTrackIds,\n  tracks: getTracks\n};\n"]},"metadata":{},"sourceType":"script"}