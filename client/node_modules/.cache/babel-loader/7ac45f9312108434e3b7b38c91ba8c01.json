{"ast":null,"code":"import * as PIXI from 'pixi.js';\nimport { imageConfig } from '../../config';\n/**\n * Class for virus objects\n */\n\nexport default class Virus {\n  constructor(renderer, stage = PIXI.Container) {\n    // Set Default values\n    this.speed = 0;\n    this.turningSpeed = 0;\n    this.direction = 0; // Setup sprite from image\n\n    const sprite = PIXI.Sprite.from(imageConfig.viruses[Math.floor(Math.random() * imageConfig.viruses.length)]); // sprite.scale.set(0.03);\n\n    sprite.width = 56;\n    sprite.height = 56;\n    sprite.anchor.set(0.5);\n    sprite.position.x = Math.floor(Math.random() * (renderer.width - 56) + 56);\n    sprite.position.y = 0; // Setup direction and speed\n\n    this.direction = Math.random() * Math.PI * 2;\n    this.turningSpeed = Math.random() - 0.8;\n    this.speed = 2 + Math.random() * 2; // Add to stage\n\n    this.sprite = sprite;\n    this.stage = stage;\n    stage.addChild(sprite);\n  }\n\n  animateVirus() {\n    const turnAdd = Math.random() < 0.5 ? 0.1 : -0.1;\n    this.direction += this.turningSpeed * turnAdd;\n    this.sprite.position.x += Math.cos(this.direction) * this.speed;\n    this.sprite.position.y += Math.abs(Math.sin(this.direction)) * this.speed;\n  }\n\n  checkCollision(bounds) {\n    if (this.sprite.position.x <= 0 || this.sprite.position.x >= bounds.gameWidth - this.sprite.width) this.direction *= -1;\n    if (this.sprite.position.y <= this.sprite.height * -1 || this.sprite.position.y >= bounds.gameHeight) return true;\n    return false;\n  }\n\n  checkPlayerCollision(player) {\n    const virusBounds = this.sprite.getBounds();\n    const playerBounds = player.sprite.getBounds();\n    return virusBounds.x + virusBounds.width >= playerBounds.x && virusBounds.x <= playerBounds.x + playerBounds.width && virusBounds.y + virusBounds.height >= playerBounds.y && virusBounds.y <= playerBounds.y + playerBounds.height;\n  }\n\n}","map":{"version":3,"sources":["/Users/quintenleysen/Documents/SINT_LUCAS/az_sint_lucas/client/src/components/games/virus-game/components/characters/Virus.js"],"names":["PIXI","imageConfig","Virus","constructor","renderer","stage","Container","speed","turningSpeed","direction","sprite","Sprite","from","viruses","Math","floor","random","length","width","height","anchor","set","position","x","y","PI","addChild","animateVirus","turnAdd","cos","abs","sin","checkCollision","bounds","gameWidth","gameHeight","checkPlayerCollision","player","virusBounds","getBounds","playerBounds"],"mappings":"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","sourcesContent":["import * as PIXI from 'pixi.js';\nimport { imageConfig } from '../../config';\n\n/**\n * Class for virus objects\n */\nexport default class Virus {\n    constructor(renderer, stage = PIXI.Container) {\n    // Set Default values\n        this.speed = 0;\n        this.turningSpeed = 0;\n        this.direction = 0;\n\n        // Setup sprite from image\n        const sprite = PIXI.Sprite.from(imageConfig.viruses[Math.floor(Math.random() * imageConfig.viruses.length)]);\n        // sprite.scale.set(0.03);\n        sprite.width = 56;\n        sprite.height = 56;\n        sprite.anchor.set(0.5);\n\n        sprite.position.x = Math.floor(Math.random() * (renderer.width - 56) + 56);\n        sprite.position.y = 0;\n\n        // Setup direction and speed\n        this.direction = Math.random() * Math.PI * 2;\n        this.turningSpeed = Math.random() - 0.8;\n        this.speed = 2 + Math.random() * 2;\n\n        // Add to stage\n        this.sprite = sprite;\n        this.stage = stage;\n\n        stage.addChild(sprite);\n    }\n\n    animateVirus() {\n        const turnAdd = Math.random() < 0.5 ? 0.1 : -0.1;\n        this.direction += this.turningSpeed * turnAdd;\n        this.sprite.position.x += Math.cos(this.direction) * this.speed;\n        this.sprite.position.y += Math.abs(Math.sin(this.direction)) * this.speed;\n    }\n\n    checkCollision(bounds) {\n        if (this.sprite.position.x <= 0 || this.sprite.position.x >= (bounds.gameWidth - this.sprite.width)) this.direction *= -1;\n        if (this.sprite.position.y <= this.sprite.height * -1 || this.sprite.position.y >= bounds.gameHeight) return true;\n        return false;\n    }\n\n    checkPlayerCollision(player) {\n        const virusBounds = this.sprite.getBounds();\n        const playerBounds = player.sprite.getBounds();\n\n        return virusBounds.x + virusBounds.width >= playerBounds.x\n          && virusBounds.x <= playerBounds.x + playerBounds.width\n          && virusBounds.y + virusBounds.height >= playerBounds.y\n          && virusBounds.y <= playerBounds.y + playerBounds.height;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}