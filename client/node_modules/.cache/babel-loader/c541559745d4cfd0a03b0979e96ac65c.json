{"ast":null,"code":"/*\n * fitty v2.3.0 - Snugly resizes text to fit its parent container\n * Copyright (c) 2020 Rik Schennink <rik@pqina.nl> (https://pqina.nl/)\n */\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nexports.default = function (w) {\n  // no window, early exit\n  if (!w) return; // node list to array helper method\n\n  var toArray = function toArray(nl) {\n    return [].slice.call(nl);\n  }; // states\n\n\n  var DrawState = {\n    IDLE: 0,\n    DIRTY_CONTENT: 1,\n    DIRTY_LAYOUT: 2,\n    DIRTY: 3\n  }; // all active fitty elements\n\n  var fitties = []; // group all redraw calls till next frame, we cancel each frame request when a new one comes in. If no support for request animation frame, this is an empty function and supports for fitty stops.\n\n  var redrawFrame = null;\n  var requestRedraw = 'requestAnimationFrame' in w ? function () {\n    w.cancelAnimationFrame(redrawFrame);\n    redrawFrame = w.requestAnimationFrame(function () {\n      return redraw(fitties.filter(function (f) {\n        return f.dirty && f.active;\n      }));\n    });\n  } : function () {}; // sets all fitties to dirty so they are redrawn on the next redraw loop, then calls redraw\n\n  var redrawAll = function redrawAll(type) {\n    return function () {\n      fitties.forEach(function (f) {\n        return f.dirty = type;\n      });\n      requestRedraw();\n    };\n  }; // redraws fitties so they nicely fit their parent container\n\n\n  var redraw = function redraw(fitties) {\n    // getting info from the DOM at this point should not trigger a reflow, let's gather as much intel as possible before triggering a reflow\n    // check if styles of all fitties have been computed\n    fitties.filter(function (f) {\n      return !f.styleComputed;\n    }).forEach(function (f) {\n      f.styleComputed = computeStyle(f);\n    }); // restyle elements that require pre-styling, this triggers a reflow, please try to prevent by adding CSS rules (see docs)\n\n    fitties.filter(shouldPreStyle).forEach(applyStyle); // we now determine which fitties should be redrawn\n\n    var fittiesToRedraw = fitties.filter(shouldRedraw); // we calculate final styles for these fitties\n\n    fittiesToRedraw.forEach(calculateStyles); // now we apply the calculated styles from our previous loop\n\n    fittiesToRedraw.forEach(function (f) {\n      applyStyle(f);\n      markAsClean(f);\n    }); // now we dispatch events for all restyled fitties\n\n    fittiesToRedraw.forEach(dispatchFitEvent);\n  };\n\n  var markAsClean = function markAsClean(f) {\n    return f.dirty = DrawState.IDLE;\n  };\n\n  var calculateStyles = function calculateStyles(f) {\n    // get available width from parent node\n    f.availableWidth = f.element.parentNode.clientWidth; // the space our target element uses\n\n    f.currentWidth = f.element.scrollWidth; // remember current font size\n\n    f.previousFontSize = f.currentFontSize; // let's calculate the new font size\n\n    f.currentFontSize = Math.min(Math.max(f.minSize, f.availableWidth / f.currentWidth * f.previousFontSize), f.maxSize); // if allows wrapping, only wrap when at minimum font size (otherwise would break container)\n\n    f.whiteSpace = f.multiLine && f.currentFontSize === f.minSize ? 'normal' : 'nowrap';\n  }; // should always redraw if is not dirty layout, if is dirty layout, only redraw if size has changed\n\n\n  var shouldRedraw = function shouldRedraw(f) {\n    return f.dirty !== DrawState.DIRTY_LAYOUT || f.dirty === DrawState.DIRTY_LAYOUT && f.element.parentNode.clientWidth !== f.availableWidth;\n  }; // every fitty element is tested for invalid styles\n\n\n  var computeStyle = function computeStyle(f) {\n    // get style properties\n    var style = w.getComputedStyle(f.element, null); // get current font size in pixels (if we already calculated it, use the calculated version)\n\n    f.currentFontSize = parseInt(style.getPropertyValue('font-size'), 10); // get display type and wrap mode\n\n    f.display = style.getPropertyValue('display');\n    f.whiteSpace = style.getPropertyValue('white-space');\n  }; // determines if this fitty requires initial styling, can be prevented by applying correct styles through CSS\n\n\n  var shouldPreStyle = function shouldPreStyle(f) {\n    var preStyle = false; // if we already tested for prestyling we don't have to do it again\n\n    if (f.preStyleTestCompleted) return false; // should have an inline style, if not, apply\n\n    if (!/inline-/.test(f.display)) {\n      preStyle = true;\n      f.display = 'inline-block';\n    } // to correctly calculate dimensions the element should have whiteSpace set to nowrap\n\n\n    if (f.whiteSpace !== 'nowrap') {\n      preStyle = true;\n      f.whiteSpace = 'nowrap';\n    } // we don't have to do this twice\n\n\n    f.preStyleTestCompleted = true;\n    return preStyle;\n  }; // apply styles to single fitty\n\n\n  var applyStyle = function applyStyle(f) {\n    // remember original style, we need this to restore the fitty style when unsubscribing\n    if (!f.originalStyle) f.originalStyle = f.element.getAttribute('style') || ''; // set the new style to the original style plus the fitty styles\n\n    f.element.style.cssText = f.originalStyle + ';white-space:' + f.whiteSpace + ';display:' + f.display + ';font-size:' + f.currentFontSize + 'px';\n  }; // dispatch a fit event on a fitty\n\n\n  var dispatchFitEvent = function dispatchFitEvent(f) {\n    f.element.dispatchEvent(new CustomEvent('fit', {\n      detail: {\n        oldValue: f.previousFontSize,\n        newValue: f.currentFontSize,\n        scaleFactor: f.currentFontSize / f.previousFontSize\n      }\n    }));\n  }; // fit method, marks the fitty as dirty and requests a redraw (this will also redraw any other fitty marked as dirty)\n\n\n  var fit = function fit(f, type) {\n    return function () {\n      f.dirty = type;\n      if (!f.active) return;\n      requestRedraw();\n    };\n  };\n\n  var init = function init(f) {\n    // should we observe DOM mutations\n    observeMutations(f); // this is a new fitty so we need to validate if it's styles are in order\n\n    f.newbie = true; // because it's a new fitty it should also be dirty, we want it to redraw on the first loop\n\n    f.dirty = true; // we want to be able to update this fitty\n\n    fitties.push(f);\n  };\n\n  var destroy = function destroy(f) {\n    return function () {\n      // remove from fitties array\n      fitties = fitties.filter(function (_) {\n        return _.element !== f.element;\n      }); // stop observing DOM\n\n      if (f.observeMutations) f.observer.disconnect(); // reset font size to inherited size\n\n      f.element.style.cssText = f.originalStyle;\n    };\n  }; // add a new fitty, does not redraw said fitty\n\n\n  var subscribe = function subscribe(f) {\n    return function () {\n      if (f.active) return;\n      f.active = true;\n      requestRedraw();\n    };\n  }; // remove an existing fitty\n\n\n  var unsubscribe = function unsubscribe(f) {\n    return function () {\n      return f.active = false;\n    };\n  };\n\n  var observeMutations = function observeMutations(f) {\n    // no observing?\n    if (!f.observeMutations) return; // start observing mutations\n\n    f.observer = new MutationObserver(fit(f, DrawState.DIRTY_CONTENT)); // start observing\n\n    f.observer.observe(f.element, f.observeMutations);\n  }; // default mutation observer settings\n\n\n  var mutationObserverDefaultSetting = {\n    subtree: true,\n    childList: true,\n    characterData: true\n  }; // default fitty options\n\n  var defaultOptions = {\n    minSize: 16,\n    maxSize: 512,\n    multiLine: true,\n    observeMutations: 'MutationObserver' in w ? mutationObserverDefaultSetting : false\n  }; // array of elements in, fitty instances out\n\n  function fittyCreate(elements, options) {\n    // set options object\n    var fittyOptions = _extends({}, defaultOptions, options); // create fitties\n\n\n    var publicFitties = elements.map(function (element) {\n      // create fitty instance\n      var f = _extends({}, fittyOptions, {\n        // internal options for this fitty\n        element: element,\n        active: true\n      }); // initialise this fitty\n\n\n      init(f); // expose API\n\n      return {\n        element: element,\n        fit: fit(f, DrawState.DIRTY),\n        unfreeze: subscribe(f),\n        freeze: unsubscribe(f),\n        unsubscribe: destroy(f)\n      };\n    }); // call redraw on newly initiated fitties\n\n    requestRedraw(); // expose fitties\n\n    return publicFitties;\n  } // fitty creation function\n\n\n  function fitty(target) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}; // if target is a string\n\n    return typeof target === 'string' ? // treat it as a querySelector\n    fittyCreate(toArray(document.querySelectorAll(target)), options) : // create single fitty\n    fittyCreate([target], options)[0];\n  } // handles viewport changes, redraws all fitties, but only does so after a timeout\n\n\n  var resizeDebounce = null;\n\n  var onWindowResized = function onWindowResized() {\n    w.clearTimeout(resizeDebounce);\n    resizeDebounce = w.setTimeout(redrawAll(DrawState.DIRTY_LAYOUT), fitty.observeWindowDelay);\n  }; // define observe window property, so when we set it to true or false events are automatically added and removed\n\n\n  var events = ['resize', 'orientationchange'];\n  Object.defineProperty(fitty, 'observeWindow', {\n    set: function set(enabled) {\n      var method = (enabled ? 'add' : 'remove') + 'EventListener';\n      events.forEach(function (e) {\n        w[method](e, onWindowResized);\n      });\n    }\n  }); // fitty global properties (by setting observeWindow to true the events above get added)\n\n  fitty.observeWindow = true;\n  fitty.observeWindowDelay = 100; // public fit all method, will force redraw no matter what\n\n  fitty.fitAll = redrawAll(DrawState.DIRTY); // export our fitty function, we don't want to keep it to our selves\n\n  return fitty;\n}(typeof window === 'undefined' ? null : window);","map":{"version":3,"sources":["/Users/quintenleysen/Documents/AZ_SINT_LUCAS/az_sint_lucas/client/node_modules/fitty/dist/fitty.module.js"],"names":["Object","defineProperty","exports","value","_extends","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","default","w","toArray","nl","slice","DrawState","IDLE","DIRTY_CONTENT","DIRTY_LAYOUT","DIRTY","fitties","redrawFrame","requestRedraw","cancelAnimationFrame","requestAnimationFrame","redraw","filter","f","dirty","active","redrawAll","type","forEach","styleComputed","computeStyle","shouldPreStyle","applyStyle","fittiesToRedraw","shouldRedraw","calculateStyles","markAsClean","dispatchFitEvent","availableWidth","element","parentNode","clientWidth","currentWidth","scrollWidth","previousFontSize","currentFontSize","Math","min","max","minSize","maxSize","whiteSpace","multiLine","style","getComputedStyle","parseInt","getPropertyValue","display","preStyle","preStyleTestCompleted","test","originalStyle","getAttribute","cssText","dispatchEvent","CustomEvent","detail","oldValue","newValue","scaleFactor","fit","init","observeMutations","newbie","push","destroy","_","observer","disconnect","subscribe","unsubscribe","MutationObserver","observe","mutationObserverDefaultSetting","subtree","childList","characterData","defaultOptions","fittyCreate","elements","options","fittyOptions","publicFitties","map","unfreeze","freeze","fitty","undefined","document","querySelectorAll","resizeDebounce","onWindowResized","clearTimeout","setTimeout","observeWindowDelay","events","set","enabled","method","e","observeWindow","fitAll","window"],"mappings":"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","sourcesContent":["/*\n * fitty v2.3.0 - Snugly resizes text to fit its parent container\n * Copyright (c) 2020 Rik Schennink <rik@pqina.nl> (https://pqina.nl/)\n */\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nexports.default = function (w) {\n\n  // no window, early exit\n  if (!w) return;\n\n  // node list to array helper method\n  var toArray = function toArray(nl) {\n    return [].slice.call(nl);\n  };\n\n  // states\n  var DrawState = {\n    IDLE: 0,\n    DIRTY_CONTENT: 1,\n    DIRTY_LAYOUT: 2,\n    DIRTY: 3\n  };\n\n  // all active fitty elements\n  var fitties = [];\n\n  // group all redraw calls till next frame, we cancel each frame request when a new one comes in. If no support for request animation frame, this is an empty function and supports for fitty stops.\n  var redrawFrame = null;\n  var requestRedraw = 'requestAnimationFrame' in w ? function () {\n    w.cancelAnimationFrame(redrawFrame);\n    redrawFrame = w.requestAnimationFrame(function () {\n      return redraw(fitties.filter(function (f) {\n        return f.dirty && f.active;\n      }));\n    });\n  } : function () {};\n\n  // sets all fitties to dirty so they are redrawn on the next redraw loop, then calls redraw\n  var redrawAll = function redrawAll(type) {\n    return function () {\n      fitties.forEach(function (f) {\n        return f.dirty = type;\n      });\n      requestRedraw();\n    };\n  };\n\n  // redraws fitties so they nicely fit their parent container\n  var redraw = function redraw(fitties) {\n\n    // getting info from the DOM at this point should not trigger a reflow, let's gather as much intel as possible before triggering a reflow\n\n    // check if styles of all fitties have been computed\n    fitties.filter(function (f) {\n      return !f.styleComputed;\n    }).forEach(function (f) {\n      f.styleComputed = computeStyle(f);\n    });\n\n    // restyle elements that require pre-styling, this triggers a reflow, please try to prevent by adding CSS rules (see docs)\n    fitties.filter(shouldPreStyle).forEach(applyStyle);\n\n    // we now determine which fitties should be redrawn\n    var fittiesToRedraw = fitties.filter(shouldRedraw);\n\n    // we calculate final styles for these fitties\n    fittiesToRedraw.forEach(calculateStyles);\n\n    // now we apply the calculated styles from our previous loop\n    fittiesToRedraw.forEach(function (f) {\n      applyStyle(f);\n      markAsClean(f);\n    });\n\n    // now we dispatch events for all restyled fitties\n    fittiesToRedraw.forEach(dispatchFitEvent);\n  };\n\n  var markAsClean = function markAsClean(f) {\n    return f.dirty = DrawState.IDLE;\n  };\n\n  var calculateStyles = function calculateStyles(f) {\n\n    // get available width from parent node\n    f.availableWidth = f.element.parentNode.clientWidth;\n\n    // the space our target element uses\n    f.currentWidth = f.element.scrollWidth;\n\n    // remember current font size\n    f.previousFontSize = f.currentFontSize;\n\n    // let's calculate the new font size\n    f.currentFontSize = Math.min(Math.max(f.minSize, f.availableWidth / f.currentWidth * f.previousFontSize), f.maxSize);\n\n    // if allows wrapping, only wrap when at minimum font size (otherwise would break container)\n    f.whiteSpace = f.multiLine && f.currentFontSize === f.minSize ? 'normal' : 'nowrap';\n  };\n\n  // should always redraw if is not dirty layout, if is dirty layout, only redraw if size has changed\n  var shouldRedraw = function shouldRedraw(f) {\n    return f.dirty !== DrawState.DIRTY_LAYOUT || f.dirty === DrawState.DIRTY_LAYOUT && f.element.parentNode.clientWidth !== f.availableWidth;\n  };\n\n  // every fitty element is tested for invalid styles\n  var computeStyle = function computeStyle(f) {\n\n    // get style properties\n    var style = w.getComputedStyle(f.element, null);\n\n    // get current font size in pixels (if we already calculated it, use the calculated version)\n    f.currentFontSize = parseInt(style.getPropertyValue('font-size'), 10);\n\n    // get display type and wrap mode\n    f.display = style.getPropertyValue('display');\n    f.whiteSpace = style.getPropertyValue('white-space');\n  };\n\n  // determines if this fitty requires initial styling, can be prevented by applying correct styles through CSS\n  var shouldPreStyle = function shouldPreStyle(f) {\n\n    var preStyle = false;\n\n    // if we already tested for prestyling we don't have to do it again\n    if (f.preStyleTestCompleted) return false;\n\n    // should have an inline style, if not, apply\n    if (!/inline-/.test(f.display)) {\n      preStyle = true;\n      f.display = 'inline-block';\n    }\n\n    // to correctly calculate dimensions the element should have whiteSpace set to nowrap\n    if (f.whiteSpace !== 'nowrap') {\n      preStyle = true;\n      f.whiteSpace = 'nowrap';\n    }\n\n    // we don't have to do this twice\n    f.preStyleTestCompleted = true;\n\n    return preStyle;\n  };\n\n  // apply styles to single fitty\n  var applyStyle = function applyStyle(f) {\n\n    // remember original style, we need this to restore the fitty style when unsubscribing\n    if (!f.originalStyle) f.originalStyle = f.element.getAttribute('style') || '';\n\n    // set the new style to the original style plus the fitty styles\n    f.element.style.cssText = f.originalStyle + ';white-space:' + f.whiteSpace + ';display:' + f.display + ';font-size:' + f.currentFontSize + 'px';\n  };\n\n  // dispatch a fit event on a fitty\n  var dispatchFitEvent = function dispatchFitEvent(f) {\n    f.element.dispatchEvent(new CustomEvent('fit', {\n      detail: {\n        oldValue: f.previousFontSize,\n        newValue: f.currentFontSize,\n        scaleFactor: f.currentFontSize / f.previousFontSize\n      }\n    }));\n  };\n\n  // fit method, marks the fitty as dirty and requests a redraw (this will also redraw any other fitty marked as dirty)\n  var fit = function fit(f, type) {\n    return function () {\n      f.dirty = type;\n      if (!f.active) return;\n      requestRedraw();\n    };\n  };\n\n  var init = function init(f) {\n\n    // should we observe DOM mutations\n    observeMutations(f);\n\n    // this is a new fitty so we need to validate if it's styles are in order\n    f.newbie = true;\n\n    // because it's a new fitty it should also be dirty, we want it to redraw on the first loop\n    f.dirty = true;\n\n    // we want to be able to update this fitty\n    fitties.push(f);\n  };\n\n  var destroy = function destroy(f) {\n    return function () {\n\n      // remove from fitties array\n      fitties = fitties.filter(function (_) {\n        return _.element !== f.element;\n      });\n\n      // stop observing DOM\n      if (f.observeMutations) f.observer.disconnect();\n\n      // reset font size to inherited size\n      f.element.style.cssText = f.originalStyle;\n    };\n  };\n\n  // add a new fitty, does not redraw said fitty\n  var subscribe = function subscribe(f) {\n    return function () {\n      if (f.active) return;\n      f.active = true;\n      requestRedraw();\n    };\n  };\n\n  // remove an existing fitty\n  var unsubscribe = function unsubscribe(f) {\n    return function () {\n      return f.active = false;\n    };\n  };\n\n  var observeMutations = function observeMutations(f) {\n\n    // no observing?\n    if (!f.observeMutations) return;\n\n    // start observing mutations\n    f.observer = new MutationObserver(fit(f, DrawState.DIRTY_CONTENT));\n\n    // start observing\n    f.observer.observe(f.element, f.observeMutations);\n  };\n\n  // default mutation observer settings\n  var mutationObserverDefaultSetting = {\n    subtree: true,\n    childList: true,\n    characterData: true\n  };\n\n  // default fitty options\n  var defaultOptions = {\n    minSize: 16,\n    maxSize: 512,\n    multiLine: true,\n    observeMutations: 'MutationObserver' in w ? mutationObserverDefaultSetting : false\n  };\n\n  // array of elements in, fitty instances out\n  function fittyCreate(elements, options) {\n\n    // set options object\n    var fittyOptions = _extends({}, defaultOptions, options);\n\n    // create fitties\n    var publicFitties = elements.map(function (element) {\n\n      // create fitty instance\n      var f = _extends({}, fittyOptions, {\n\n        // internal options for this fitty\n        element: element,\n        active: true\n      });\n\n      // initialise this fitty\n      init(f);\n\n      // expose API\n      return {\n        element: element,\n        fit: fit(f, DrawState.DIRTY),\n        unfreeze: subscribe(f),\n        freeze: unsubscribe(f),\n        unsubscribe: destroy(f)\n      };\n    });\n\n    // call redraw on newly initiated fitties\n    requestRedraw();\n\n    // expose fitties\n    return publicFitties;\n  }\n\n  // fitty creation function\n  function fitty(target) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n\n    // if target is a string\n    return typeof target === 'string' ?\n\n    // treat it as a querySelector\n    fittyCreate(toArray(document.querySelectorAll(target)), options) :\n\n    // create single fitty\n    fittyCreate([target], options)[0];\n  }\n\n  // handles viewport changes, redraws all fitties, but only does so after a timeout\n  var resizeDebounce = null;\n  var onWindowResized = function onWindowResized() {\n    w.clearTimeout(resizeDebounce);\n    resizeDebounce = w.setTimeout(redrawAll(DrawState.DIRTY_LAYOUT), fitty.observeWindowDelay);\n  };\n\n  // define observe window property, so when we set it to true or false events are automatically added and removed\n  var events = ['resize', 'orientationchange'];\n  Object.defineProperty(fitty, 'observeWindow', {\n    set: function set(enabled) {\n      var method = (enabled ? 'add' : 'remove') + 'EventListener';\n      events.forEach(function (e) {\n        w[method](e, onWindowResized);\n      });\n    }\n  });\n\n  // fitty global properties (by setting observeWindow to true the events above get added)\n  fitty.observeWindow = true;\n  fitty.observeWindowDelay = 100;\n\n  // public fit all method, will force redraw no matter what\n  fitty.fitAll = redrawAll(DrawState.DIRTY);\n\n  // export our fitty function, we don't want to keep it to our selves\n  return fitty;\n}(typeof window === 'undefined' ? null : window);"]},"metadata":{},"sourceType":"script"}